// Code generated by MockGen. DO NOT EDIT.
// Source: plugin.go

// Package mocks is a generated GoMock package.
package mocks

import (
	plugin "pluggin-engine/internal/plugin"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// FetchFirewallData mocks base method.
func (m *MockService) FetchFirewallData() (plugin.FirewallDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFirewallData")
	ret0, _ := ret[0].(plugin.FirewallDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFirewallData indicates an expected call of FetchFirewallData.
func (mr *MockServiceMockRecorder) FetchFirewallData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFirewallData", reflect.TypeOf((*MockService)(nil).FetchFirewallData))
}

// FetchLinuxServerData mocks base method.
func (m *MockService) FetchLinuxServerData() (plugin.LinuxServerDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLinuxServerData")
	ret0, _ := ret[0].(plugin.LinuxServerDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLinuxServerData indicates an expected call of FetchLinuxServerData.
func (mr *MockServiceMockRecorder) FetchLinuxServerData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLinuxServerData", reflect.TypeOf((*MockService)(nil).FetchLinuxServerData))
}

// FetchLoadBalancerData mocks base method.
func (m *MockService) FetchLoadBalancerData() (plugin.LoadBalancerDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLoadBalancerData")
	ret0, _ := ret[0].(plugin.LoadBalancerDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLoadBalancerData indicates an expected call of FetchLoadBalancerData.
func (mr *MockServiceMockRecorder) FetchLoadBalancerData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLoadBalancerData", reflect.TypeOf((*MockService)(nil).FetchLoadBalancerData))
}

// FetchRouterData mocks base method.
func (m *MockService) FetchRouterData() (plugin.RouterDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRouterData")
	ret0, _ := ret[0].(plugin.RouterDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRouterData indicates an expected call of FetchRouterData.
func (mr *MockServiceMockRecorder) FetchRouterData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRouterData", reflect.TypeOf((*MockService)(nil).FetchRouterData))
}

// FetchSwitchData mocks base method.
func (m *MockService) FetchSwitchData() (plugin.SwitchDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSwitchData")
	ret0, _ := ret[0].(plugin.SwitchDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSwitchData indicates an expected call of FetchSwitchData.
func (mr *MockServiceMockRecorder) FetchSwitchData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSwitchData", reflect.TypeOf((*MockService)(nil).FetchSwitchData))
}

// FetchWindowsServerData mocks base method.
func (m *MockService) FetchWindowsServerData() (plugin.WindowsServerDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchWindowsServerData")
	ret0, _ := ret[0].(plugin.WindowsServerDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchWindowsServerData indicates an expected call of FetchWindowsServerData.
func (mr *MockServiceMockRecorder) FetchWindowsServerData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchWindowsServerData", reflect.TypeOf((*MockService)(nil).FetchWindowsServerData))
}
